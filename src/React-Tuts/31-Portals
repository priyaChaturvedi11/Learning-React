MAY 14 - PORTALS

Portals help us render elements or component to be renedered under some other node in the DOM tree which doesn't happen to be its actual parent in React per say.

Figure1 
Node1 NOde2 NOde3
        |
       Comp1
 	      
	If above is how Comp1 is loacted in REact and we want to make it a part of the NOde1, it can be done using react portals.
	
DOM TREE cuz of using react portals

Figure2
NOde1 NOde2 NOde3
   |
 Comp1
	
React portals can be used to implement above mentioned behavior for any thing that react can render - jsx, number, strings, and even a component etc

Another use case of portals can be to not let parent component (In react's terms) to mess up portal component/ modal/ pop-up's css or UI. ( https://codesandbox.io/s/00254q4n6p )

Also, a portal is just a normal react child in all other ways so event bubbling also works in the normal way, that is, event will bubble up from child to parent in terms of react and not in terms of DOM tree. So considering figure2 & 1, an event generated by Comp1 will bubble up to NOde2 and not NOde1. Because that's its actual ancestor in React code.( https://codepen.io/gaearon/pen/jGBWpE )


CODE EXAMPLE
------------

import React from 'react'
import ReactDOM from 'react-dom'

function PortalDemo() {
    return ReactDOM.createPortal(
        <h1>Portal</h1>,
        document.getElementById('react-portal')
    )
}


export default PortalDemo


App.js

function App() {
	return (
		<PortalDemo />
	)      
}

inside public

index.html

  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <div id="react-portal"></div>
</body>


