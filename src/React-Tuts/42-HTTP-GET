MAY 24 - HTTP GET

Refer to PostList.js

*API to be used: jsonplaceholder

Following, helps us in fetchin g data from api endpoint

// If we provide correct url and there occurs no error
 componentDidMount(){
        axios.get('https://jsonplaceholder.typicode.com/posts')
            .then(response => {
                console.log(response)
            }).catch(error => {
                console.log(error)
            })
    }
// In console, we'' be able to see a object being logged whose data keyy will have all the posts fetched from api end point.

----------------------

// If there occurs an error
 componentDidMount(){
        axios.get('https://jsonplaceholder.typicode.com/posts1')
            .then(response => {
                console.log(response)
            }).catch(error => {
                console.log(error)
            })
    }

Error: Request failed with status code 404
    createError createError.js:16
    settle settle.js:17
    handleLoad xhr.js:62
    dispatchXhrRequest xhr.js:37
    xhrAdapter xhr.js:13
    dispatchRequest dispatchRequest.js:52
    promise callback*request Axios.js:61
    method Axios.js:76
    wrap bind.js:9
    componentDidMount PostList.js:14
    React 17
    performReactRefresh index.js:1
    performReactRefresh index.js:2
    refreshTimeout RefreshUtils.js:62
    setTimeout handler*enqueueUpdate RefreshUtils.js:60
    js main.6b9469d9b133b4db91e6.hot-update.js:107
    js main.6b9469d9b133b4db91e6.hot-update.js:129
    Webpack 8
    
------------------------------

Building rendering logic on the basis of data fetching success

import React, { Component } from 'react'
import axios from 'axios'

class PostList extends Component {
    constructor(props) {
        super(props)
    
        this.state = {
             posts: [],
             error: ''
        }
    }
    
    componentDidMount(){
        axios.get('https://jsonplaceholder.typicode.com/posts')
            .then(response => {
                console.log(response)
                this.setState({
                    posts: response.data
                })
            }).catch(error => {
                console.log(error)
                this.setState({
                    error: "Error occurred while fetching data"
                })
            })
    }

    render() {
       const { posts, error } = this.state
        return (
        /*In following part, initially posts array's length is zero so no rendering happens. After the mounting of component, componentDidMount() method is called and data is fetched. Basically, the get() method returns a response, and data key of that response object is used to update posts property in the state of the component by calling this.setState(). 
        
If data fetching is successful, length of posts array no longer remains zero, and hence, map() method is executed, which, for every post in the post array, renders the title of the post.
        */
            <div>
                List of Posts
                {
                    posts.length ? 
                    posts.map(post =>  <div key={post.id}>{post.title}<br/> </div>) :
                    null
                }
            </div>
        )
    }
}

export default PostList

    
